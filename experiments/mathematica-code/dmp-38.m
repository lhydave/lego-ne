(* Mathematica code generated from /Volumes/Files/Projects/lego-ne/experiments/legone-code/dmp-38.legone *)

(* name alias and parameters *)
d_U1;	(* U1(x,y) *)
d_f1;	(* f1(x,y) *)
d_U2;	(* U2(x,y) *)
d_f2;	(* f2(x,y) *)
c_U1;	(* U1(x,beta) *)
c_f1;	(* f1(x,beta) *)
c_U2;	(* U2(x,beta) *)
c_f2;	(* f2(x,beta) *)
b_U1;	(* U1(alpha,y) *)
b_f1;	(* f1(alpha,y) *)
b_U2;	(* U2(alpha,y) *)
b_f2;	(* f2(alpha,y) *)
a_U1;	(* U1(alpha,beta) *)
a_f1;	(* f1(alpha,beta) *)
a_U2;	(* U2(alpha,beta) *)
a_f2;	(* f2(alpha,beta) *)
vr;	(* param vr *)
vc;	(* param vc *)

(* constraint for optimal mixing operation *)
optmix[vara1_, varb1_, vara2_, varb2_] := Piecewise[{
	{ Min[Min[Max[vara1, vara2], Max[varb1, varb2]], Max[(1 - (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1)) * vara1 + (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1) * varb1, (1 - (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1)) * vara2 + (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1) * varb2]], ((vara1 > varb1 && vara2 < varb2) || (vara1 < varb1 && vara2 > varb2)) }},
	Min[Max[vara1, vara2], Max[varb1, varb2]]];

bound1 = optmix[a_f1, c_f1, a_f2, c_f2];	(* (alpha,beta) -- (x,beta) *)

bound2 = optmix[b_f1, d_f1, b_f2, d_f2];	(* (alpha,y) -- (x,y) *)

bound3 = optmix[a_f1, b_f1, a_f2, b_f2];	(* (alpha,beta) -- (alpha,y) *)

bound4 = optmix[c_f1, d_f1, c_f2, d_f2];	(* (x,beta) -- (x,y) *)


(* constraints *)
constraints = {
	((a_f1 - a_f1) == (a_U1 - a_U1)),          (* ((f1(alpha,beta) - f1(alpha,beta)) == (U1(alpha,beta) - U1(alpha,beta))) *)
	((c_f1 - a_f1) == (a_U1 - c_U1)),          (* ((f1(x,beta) - f1(alpha,beta)) == (U1(alpha,beta) - U1(x,beta))) *)
	((a_f1 - c_f1) == (c_U1 - a_U1)),          (* ((f1(alpha,beta) - f1(x,beta)) == (U1(x,beta) - U1(alpha,beta))) *)
	((c_f1 - c_f1) == (c_U1 - c_U1)),          (* ((f1(x,beta) - f1(x,beta)) == (U1(x,beta) - U1(x,beta))) *)
	((b_f1 - b_f1) == (b_U1 - b_U1)),          (* ((f1(alpha,y) - f1(alpha,y)) == (U1(alpha,y) - U1(alpha,y))) *)
	((d_f1 - b_f1) == (b_U1 - d_U1)),          (* ((f1(x,y) - f1(alpha,y)) == (U1(alpha,y) - U1(x,y))) *)
	((b_f1 - d_f1) == (d_U1 - b_U1)),          (* ((f1(alpha,y) - f1(x,y)) == (U1(x,y) - U1(alpha,y))) *)
	((d_f1 - d_f1) == (d_U1 - d_U1)),          (* ((f1(x,y) - f1(x,y)) == (U1(x,y) - U1(x,y))) *)
	((a_f1 - a_f1) == ((a_U1 + a_f1) - a_U1)),  (* ((f1(alpha,beta) - f1(alpha,beta)) == ((U1(alpha,beta) + f1(alpha,beta)) - U1(alpha,beta))) *)
	((a_f1 - c_f1) == ((c_U1 + c_f1) - a_U1)),  (* ((f1(alpha,beta) - f1(x,beta)) == ((U1(x,beta) + f1(x,beta)) - U1(alpha,beta))) *)
	((b_f1 - b_f1) == ((b_U1 + b_f1) - b_U1)),  (* ((f1(alpha,y) - f1(alpha,y)) == ((U1(alpha,y) + f1(alpha,y)) - U1(alpha,y))) *)
	((b_f1 - d_f1) == ((d_U1 + d_f1) - b_U1)),  (* ((f1(alpha,y) - f1(x,y)) == ((U1(x,y) + f1(x,y)) - U1(alpha,y))) *)
	((c_f1 - a_f1) == ((a_U1 + a_f1) - c_U1)),  (* ((f1(x,beta) - f1(alpha,beta)) == ((U1(alpha,beta) + f1(alpha,beta)) - U1(x,beta))) *)
	((c_f1 - c_f1) == ((c_U1 + c_f1) - c_U1)),  (* ((f1(x,beta) - f1(x,beta)) == ((U1(x,beta) + f1(x,beta)) - U1(x,beta))) *)
	((d_f1 - b_f1) == ((b_U1 + b_f1) - d_U1)),  (* ((f1(x,y) - f1(alpha,y)) == ((U1(alpha,y) + f1(alpha,y)) - U1(x,y))) *)
	((d_f1 - d_f1) == ((d_U1 + d_f1) - d_U1)),  (* ((f1(x,y) - f1(x,y)) == ((U1(x,y) + f1(x,y)) - U1(x,y))) *)
	((a_f1 - a_f1) == (a_U1 - a_U1)),          (* ((f1(alpha,beta) - f1(alpha,beta)) == (U1(alpha,beta) - U1(alpha,beta))) *)
	((b_f1 - b_f1) == (b_U1 - b_U1)),          (* ((f1(alpha,y) - f1(alpha,y)) == (U1(alpha,y) - U1(alpha,y))) *)
	((c_f1 - c_f1) == (c_U1 - c_U1)),          (* ((f1(x,beta) - f1(x,beta)) == (U1(x,beta) - U1(x,beta))) *)
	((d_f1 - d_f1) == (d_U1 - d_U1)),          (* ((f1(x,y) - f1(x,y)) == (U1(x,y) - U1(x,y))) *)
	((a_f1 - a_f1) == (a_U1 - (a_U1 + a_f1))),  (* ((f1(alpha,beta) - f1(alpha,beta)) == (U1(alpha,beta) - (U1(alpha,beta) + f1(alpha,beta)))) *)
	((c_f1 - a_f1) == (a_U1 - (c_U1 + c_f1))),  (* ((f1(x,beta) - f1(alpha,beta)) == (U1(alpha,beta) - (U1(x,beta) + f1(x,beta)))) *)
	((a_f1 - c_f1) == (c_U1 - (a_U1 + a_f1))),  (* ((f1(alpha,beta) - f1(x,beta)) == (U1(x,beta) - (U1(alpha,beta) + f1(alpha,beta)))) *)
	((c_f1 - c_f1) == (c_U1 - (c_U1 + c_f1))),  (* ((f1(x,beta) - f1(x,beta)) == (U1(x,beta) - (U1(x,beta) + f1(x,beta)))) *)
	((b_f1 - b_f1) == (b_U1 - (b_U1 + b_f1))),  (* ((f1(alpha,y) - f1(alpha,y)) == (U1(alpha,y) - (U1(alpha,y) + f1(alpha,y)))) *)
	((d_f1 - b_f1) == (b_U1 - (d_U1 + d_f1))),  (* ((f1(x,y) - f1(alpha,y)) == (U1(alpha,y) - (U1(x,y) + f1(x,y)))) *)
	((b_f1 - d_f1) == (d_U1 - (b_U1 + b_f1))),  (* ((f1(alpha,y) - f1(x,y)) == (U1(x,y) - (U1(alpha,y) + f1(alpha,y)))) *)
	((d_f1 - d_f1) == (d_U1 - (d_U1 + d_f1))),  (* ((f1(x,y) - f1(x,y)) == (U1(x,y) - (U1(x,y) + f1(x,y)))) *)
	((a_f2 - a_f2) == (a_U2 - a_U2)),          (* ((f2(alpha,beta) - f2(alpha,beta)) == (U2(alpha,beta) - U2(alpha,beta))) *)
	((c_f2 - c_f2) == (c_U2 - c_U2)),          (* ((f2(x,beta) - f2(x,beta)) == (U2(x,beta) - U2(x,beta))) *)
	((b_f2 - a_f2) == (a_U2 - b_U2)),          (* ((f2(alpha,y) - f2(alpha,beta)) == (U2(alpha,beta) - U2(alpha,y))) *)
	((d_f2 - c_f2) == (c_U2 - d_U2)),          (* ((f2(x,y) - f2(x,beta)) == (U2(x,beta) - U2(x,y))) *)
	((a_f2 - b_f2) == (b_U2 - a_U2)),          (* ((f2(alpha,beta) - f2(alpha,y)) == (U2(alpha,y) - U2(alpha,beta))) *)
	((c_f2 - d_f2) == (d_U2 - c_U2)),          (* ((f2(x,beta) - f2(x,y)) == (U2(x,y) - U2(x,beta))) *)
	((b_f2 - b_f2) == (b_U2 - b_U2)),          (* ((f2(alpha,y) - f2(alpha,y)) == (U2(alpha,y) - U2(alpha,y))) *)
	((d_f2 - d_f2) == (d_U2 - d_U2)),          (* ((f2(x,y) - f2(x,y)) == (U2(x,y) - U2(x,y))) *)
	((a_f2 - a_f2) == (a_U2 - (a_U2 + a_f2))),  (* ((f2(alpha,beta) - f2(alpha,beta)) == (U2(alpha,beta) - (U2(alpha,beta) + f2(alpha,beta)))) *)
	((b_f2 - a_f2) == (a_U2 - (b_U2 + b_f2))),  (* ((f2(alpha,y) - f2(alpha,beta)) == (U2(alpha,beta) - (U2(alpha,y) + f2(alpha,y)))) *)
	((a_f2 - b_f2) == (b_U2 - (a_U2 + a_f2))),  (* ((f2(alpha,beta) - f2(alpha,y)) == (U2(alpha,y) - (U2(alpha,beta) + f2(alpha,beta)))) *)
	((b_f2 - b_f2) == (b_U2 - (b_U2 + b_f2))),  (* ((f2(alpha,y) - f2(alpha,y)) == (U2(alpha,y) - (U2(alpha,y) + f2(alpha,y)))) *)
	((c_f2 - c_f2) == (c_U2 - (c_U2 + c_f2))),  (* ((f2(x,beta) - f2(x,beta)) == (U2(x,beta) - (U2(x,beta) + f2(x,beta)))) *)
	((d_f2 - c_f2) == (c_U2 - (d_U2 + d_f2))),  (* ((f2(x,y) - f2(x,beta)) == (U2(x,beta) - (U2(x,y) + f2(x,y)))) *)
	((c_f2 - d_f2) == (d_U2 - (c_U2 + c_f2))),  (* ((f2(x,beta) - f2(x,y)) == (U2(x,y) - (U2(x,beta) + f2(x,beta)))) *)
	((d_f2 - d_f2) == (d_U2 - (d_U2 + d_f2))),  (* ((f2(x,y) - f2(x,y)) == (U2(x,y) - (U2(x,y) + f2(x,y)))) *)
	((a_f2 - a_f2) == ((a_U2 + a_f2) - a_U2)),  (* ((f2(alpha,beta) - f2(alpha,beta)) == ((U2(alpha,beta) + f2(alpha,beta)) - U2(alpha,beta))) *)
	((a_f2 - b_f2) == ((b_U2 + b_f2) - a_U2)),  (* ((f2(alpha,beta) - f2(alpha,y)) == ((U2(alpha,y) + f2(alpha,y)) - U2(alpha,beta))) *)
	((c_f2 - c_f2) == ((c_U2 + c_f2) - c_U2)),  (* ((f2(x,beta) - f2(x,beta)) == ((U2(x,beta) + f2(x,beta)) - U2(x,beta))) *)
	((c_f2 - d_f2) == ((d_U2 + d_f2) - c_U2)),  (* ((f2(x,beta) - f2(x,y)) == ((U2(x,y) + f2(x,y)) - U2(x,beta))) *)
	((b_f2 - a_f2) == ((a_U2 + a_f2) - b_U2)),  (* ((f2(alpha,y) - f2(alpha,beta)) == ((U2(alpha,beta) + f2(alpha,beta)) - U2(alpha,y))) *)
	((b_f2 - b_f2) == ((b_U2 + b_f2) - b_U2)),  (* ((f2(alpha,y) - f2(alpha,y)) == ((U2(alpha,y) + f2(alpha,y)) - U2(alpha,y))) *)
	((d_f2 - c_f2) == ((c_U2 + c_f2) - d_U2)),  (* ((f2(x,y) - f2(x,beta)) == ((U2(x,beta) + f2(x,beta)) - U2(x,y))) *)
	((d_f2 - d_f2) == ((d_U2 + d_f2) - d_U2)),  (* ((f2(x,y) - f2(x,y)) == ((U2(x,y) + f2(x,y)) - U2(x,y))) *)
	((a_f2 - a_f2) == (a_U2 - a_U2)),          (* ((f2(alpha,beta) - f2(alpha,beta)) == (U2(alpha,beta) - U2(alpha,beta))) *)
	((c_f2 - c_f2) == (c_U2 - c_U2)),          (* ((f2(x,beta) - f2(x,beta)) == (U2(x,beta) - U2(x,beta))) *)
	((b_f2 - b_f2) == (b_U2 - b_U2)),          (* ((f2(alpha,y) - f2(alpha,y)) == (U2(alpha,y) - U2(alpha,y))) *)
	((d_f2 - d_f2) == (d_U2 - d_U2)),          (* ((f2(x,y) - f2(x,y)) == (U2(x,y) - U2(x,y))) *)
	(0 <= vr),                                 (* (0 <= vr) *)
	(vr <= 1),                                 (* (vr <= 1) *)
	(0 <= vc),                                 (* (0 <= vc) *)
	(vc <= 1),                                 (* (vc <= 1) *)
	(a_U1 >= vr),                              (* (U1(alpha,beta) >= vr) *)
	(a_U2 >= vc),                              (* (U2(alpha,beta) >= vc) *)
	(b_U1 >= vr),                              (* (U1(alpha,y) >= vr) *)
	(b_U1 <= vr),                              (* (U1(alpha,y) <= vr) *)
	(d_U1 <= vr),                              (* (U1(x,y) <= vr) *)
	((b_U1 + b_f1) <= vr),                     (* ((U1(alpha,y) + f1(alpha,y)) <= vr) *)
	((d_U1 + d_f1) <= vr),                     (* ((U1(x,y) + f1(x,y)) <= vr) *)
	(c_U1 >= vr),                              (* (U1(x,beta) >= vr) *)
	(b_U2 >= vc),                              (* (U2(alpha,y) >= vc) *)
	(c_U2 <= vc),                              (* (U2(x,beta) <= vc) *)
	(d_U2 <= vc),                              (* (U2(x,y) <= vc) *)
	((c_U2 + c_f2) <= vc),                     (* ((U2(x,beta) + f2(x,beta)) <= vc) *)
	((d_U2 + d_f2) <= vc),                     (* ((U2(x,y) + f2(x,y)) <= vc) *)
	(c_U2 >= vc),                              (* (U2(x,beta) >= vc) *)
	(a_U1 >= 0),                               (* (U1(alpha,beta) >= 0) *)
	(a_U1 <= 1),                               (* (U1(alpha,beta) <= 1) *)
	(a_f1 >= 0),                               (* (f1(alpha,beta) >= 0) *)
	(a_f1 <= 1),                               (* (f1(alpha,beta) <= 1) *)
	((a_U1 + a_f1) <= 1),                      (* ((U1(alpha,beta) + f1(alpha,beta)) <= 1) *)
	(a_U2 >= 0),                               (* (U2(alpha,beta) >= 0) *)
	(a_U2 <= 1),                               (* (U2(alpha,beta) <= 1) *)
	(a_f2 >= 0),                               (* (f2(alpha,beta) >= 0) *)
	(a_f2 <= 1),                               (* (f2(alpha,beta) <= 1) *)
	((a_U2 + a_f2) <= 1),                      (* ((U2(alpha,beta) + f2(alpha,beta)) <= 1) *)
	(b_U1 >= 0),                               (* (U1(alpha,y) >= 0) *)
	(b_U1 <= 1),                               (* (U1(alpha,y) <= 1) *)
	(b_f1 >= 0),                               (* (f1(alpha,y) >= 0) *)
	(b_f1 <= 1),                               (* (f1(alpha,y) <= 1) *)
	((b_U1 + b_f1) <= 1),                      (* ((U1(alpha,y) + f1(alpha,y)) <= 1) *)
	(b_U2 >= 0),                               (* (U2(alpha,y) >= 0) *)
	(b_U2 <= 1),                               (* (U2(alpha,y) <= 1) *)
	(b_f2 >= 0),                               (* (f2(alpha,y) >= 0) *)
	(b_f2 <= 1),                               (* (f2(alpha,y) <= 1) *)
	((b_U2 + b_f2) <= 1),                      (* ((U2(alpha,y) + f2(alpha,y)) <= 1) *)
	(c_U1 >= 0),                               (* (U1(x,beta) >= 0) *)
	(c_U1 <= 1),                               (* (U1(x,beta) <= 1) *)
	(c_f1 >= 0),                               (* (f1(x,beta) >= 0) *)
	(c_f1 <= 1),                               (* (f1(x,beta) <= 1) *)
	((c_U1 + c_f1) <= 1),                      (* ((U1(x,beta) + f1(x,beta)) <= 1) *)
	(c_U2 >= 0),                               (* (U2(x,beta) >= 0) *)
	(c_U2 <= 1),                               (* (U2(x,beta) <= 1) *)
	(c_f2 >= 0),                               (* (f2(x,beta) >= 0) *)
	(c_f2 <= 1),                               (* (f2(x,beta) <= 1) *)
	((c_U2 + c_f2) <= 1),                      (* ((U2(x,beta) + f2(x,beta)) <= 1) *)
	(d_U1 >= 0),                               (* (U1(x,y) >= 0) *)
	(d_U1 <= 1),                               (* (U1(x,y) <= 1) *)
	(d_f1 >= 0),                               (* (f1(x,y) >= 0) *)
	(d_f1 <= 1),                               (* (f1(x,y) <= 1) *)
	((d_U1 + d_f1) <= 1),                      (* ((U1(x,y) + f1(x,y)) <= 1) *)
	(d_U2 >= 0),                               (* (U2(x,y) >= 0) *)
	(d_U2 <= 1),                               (* (U2(x,y) <= 1) *)
	(d_f2 >= 0),                               (* (f2(x,y) >= 0) *)
	(d_f2 <= 1),                               (* (f2(x,y) <= 1) *)
	((d_U2 + d_f2) <= 1)                       (* ((U2(x,y) + f2(x,y)) <= 1) *)
};

(* solve the approximation bound *)
NMaximize[{Min[bound1, bound2, bound3, bound4], constraints}, {d_U1, d_f1, d_U2, d_f2, c_U1, c_f1, c_U2, c_f2, b_U1, b_f1, b_U2, b_f2, a_U1, a_f1, a_U2, a_f2, vr, vc}, AccuracyGoal -> 40, WorkingPrecision -> 60, Method -> "DifferentialEvolution", MaxIterations -> 1000]