(* Mathematica code generated from /Volumes/Files/Projects/lego-ne/experiments/legone-code/dmp-5.legone *)

(* name alias and parameters *)
b_U1;	(* U1(b1,b2) *)
b_f1;	(* f1(b1,b2) *)
b_U2;	(* U2(b1,b2) *)
b_f2;	(* f2(b1,b2) *)
a_U1;	(* U1(a1,b2) *)
a_f1;	(* f1(a1,b2) *)
a_U2;	(* U2(a1,b2) *)
a_f2;	(* f2(a1,b2) *)

(* constraint for optimal mixing operation *)
optmix[vara1_, varb1_, vara2_, varb2_] := Piecewise[{
	{ Min[Min[Max[vara1, vara2], Max[varb1, varb2]], Max[(1 - (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1)) * vara1 + (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1) * varb1, (1 - (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1)) * vara2 + (vara1 * varb2 - vara2 * varb1) / (vara1 + varb2 - vara2 - varb1) * varb2]], ((vara1 > varb1 && vara2 < varb2) || (vara1 < varb1 && vara2 > varb2)) }},
	Min[Max[vara1, vara2], Max[varb1, varb2]]];

bound1 = optmix[a_f1, b_f1, a_f2, b_f2];	(* (a1,b2) -- (b1,b2) *)


(* constraints *)
constraints = {
	(b_U2 <= b_U2),                           (* (U2(b1,b2) <= U2(b1,b2)) *)
	((b_U2 + b_f2) <= b_U2),                  (* ((U2(b1,b2) + f2(b1,b2)) <= U2(b1,b2)) *)
	((a_f1 - a_f1) = (a_U1 - a_U1)),          (* ((f1(a1,b2) - f1(a1,b2)) = (U1(a1,b2) - U1(a1,b2))) *)
	((a_f1 - a_f1) = (a_U1 - a_U1)),          (* ((f1(a1,b2) - f1(a1,b2)) = (U1(a1,b2) - U1(a1,b2))) *)
	((a_f1 - b_f1) = (b_U1 - a_U1)),          (* ((f1(a1,b2) - f1(b1,b2)) = (U1(b1,b2) - U1(a1,b2))) *)
	((a_f1 - b_f1) = (b_U1 - a_U1)),          (* ((f1(a1,b2) - f1(b1,b2)) = (U1(b1,b2) - U1(a1,b2))) *)
	((a_f1 - a_f1) = ((a_U1 + a_f1) - a_U1)),  (* ((f1(a1,b2) - f1(a1,b2)) = ((U1(a1,b2) + f1(a1,b2)) - U1(a1,b2))) *)
	((a_f1 - b_f1) = ((b_U1 + b_f1) - a_U1)),  (* ((f1(a1,b2) - f1(b1,b2)) = ((U1(b1,b2) + f1(b1,b2)) - U1(a1,b2))) *)
	((a_f1 - a_f1) = ((a_U1 + a_f1) - a_U1)),  (* ((f1(a1,b2) - f1(a1,b2)) = ((U1(a1,b2) + f1(a1,b2)) - U1(a1,b2))) *)
	((a_f1 - b_f1) = ((b_U1 + b_f1) - a_U1)),  (* ((f1(a1,b2) - f1(b1,b2)) = ((U1(b1,b2) + f1(b1,b2)) - U1(a1,b2))) *)
	((a_f1 - a_f1) = (a_U1 - a_U1)),          (* ((f1(a1,b2) - f1(a1,b2)) = (U1(a1,b2) - U1(a1,b2))) *)
	((a_f1 - a_f1) = (a_U1 - a_U1)),          (* ((f1(a1,b2) - f1(a1,b2)) = (U1(a1,b2) - U1(a1,b2))) *)
	((a_f1 - a_f1) = (a_U1 - a_U1)),          (* ((f1(a1,b2) - f1(a1,b2)) = (U1(a1,b2) - U1(a1,b2))) *)
	((a_f1 - a_f1) = (a_U1 - a_U1)),          (* ((f1(a1,b2) - f1(a1,b2)) = (U1(a1,b2) - U1(a1,b2))) *)
	((a_f1 - b_f1) = (b_U1 - a_U1)),          (* ((f1(a1,b2) - f1(b1,b2)) = (U1(b1,b2) - U1(a1,b2))) *)
	((a_f1 - b_f1) = (b_U1 - a_U1)),          (* ((f1(a1,b2) - f1(b1,b2)) = (U1(b1,b2) - U1(a1,b2))) *)
	((a_f2 - a_f2) = (a_U2 - a_U2)),          (* ((f2(a1,b2) - f2(a1,b2)) = (U2(a1,b2) - U2(a1,b2))) *)
	((b_f2 - b_f2) = (b_U2 - b_U2)),          (* ((f2(b1,b2) - f2(b1,b2)) = (U2(b1,b2) - U2(b1,b2))) *)
	((a_f2 - a_f2) = (a_U2 - (a_U2 + a_f2))),  (* ((f2(a1,b2) - f2(a1,b2)) = (U2(a1,b2) - (U2(a1,b2) + f2(a1,b2)))) *)
	((b_f2 - b_f2) = (b_U2 - (b_U2 + b_f2))),  (* ((f2(b1,b2) - f2(b1,b2)) = (U2(b1,b2) - (U2(b1,b2) + f2(b1,b2)))) *)
	((a_f2 - a_f2) = ((a_U2 + a_f2) - a_U2)),  (* ((f2(a1,b2) - f2(a1,b2)) = ((U2(a1,b2) + f2(a1,b2)) - U2(a1,b2))) *)
	((b_f2 - b_f2) = ((b_U2 + b_f2) - b_U2)),  (* ((f2(b1,b2) - f2(b1,b2)) = ((U2(b1,b2) + f2(b1,b2)) - U2(b1,b2))) *)
	((a_f2 - a_f2) = (a_U2 - a_U2)),          (* ((f2(a1,b2) - f2(a1,b2)) = (U2(a1,b2) - U2(a1,b2))) *)
	((b_f2 - b_f2) = (b_U2 - b_U2)),          (* ((f2(b1,b2) - f2(b1,b2)) = (U2(b1,b2) - U2(b1,b2))) *)
	(a_U1 <= a_U1),                           (* (U1(a1,b2) <= U1(a1,b2)) *)
	(b_U1 <= a_U1),                           (* (U1(b1,b2) <= U1(a1,b2)) *)
	((a_U1 + a_f1) <= a_U1),                  (* ((U1(a1,b2) + f1(a1,b2)) <= U1(a1,b2)) *)
	((b_U1 + b_f1) <= a_U1),                  (* ((U1(b1,b2) + f1(b1,b2)) <= U1(a1,b2)) *)
	(a_U1 >= 0),                              (* (U1(a1,b2) >= 0) *)
	(a_U1 <= 1),                              (* (U1(a1,b2) <= 1) *)
	(a_f1 >= 0),                              (* (f1(a1,b2) >= 0) *)
	(a_f1 <= 1),                              (* (f1(a1,b2) <= 1) *)
	((a_U1 + a_f1) <= 1),                     (* ((U1(a1,b2) + f1(a1,b2)) <= 1) *)
	(a_U2 >= 0),                              (* (U2(a1,b2) >= 0) *)
	(a_U2 <= 1),                              (* (U2(a1,b2) <= 1) *)
	(a_f2 >= 0),                              (* (f2(a1,b2) >= 0) *)
	(a_f2 <= 1),                              (* (f2(a1,b2) <= 1) *)
	((a_U2 + a_f2) <= 1),                     (* ((U2(a1,b2) + f2(a1,b2)) <= 1) *)
	(b_U1 >= 0),                              (* (U1(b1,b2) >= 0) *)
	(b_U1 <= 1),                              (* (U1(b1,b2) <= 1) *)
	(b_f1 >= 0),                              (* (f1(b1,b2) >= 0) *)
	(b_f1 <= 1),                              (* (f1(b1,b2) <= 1) *)
	((b_U1 + b_f1) <= 1),                     (* ((U1(b1,b2) + f1(b1,b2)) <= 1) *)
	(b_U2 >= 0),                              (* (U2(b1,b2) >= 0) *)
	(b_U2 <= 1),                              (* (U2(b1,b2) <= 1) *)
	(b_f2 >= 0),                              (* (f2(b1,b2) >= 0) *)
	(b_f2 <= 1),                              (* (f2(b1,b2) <= 1) *)
	((b_U2 + b_f2) <= 1)                      (* ((U2(b1,b2) + f2(b1,b2)) <= 1) *)
};

(* solve the approximation bound *)
NMaximize[{bound1, constraints}, {b_U1, b_f1, b_U2, b_f2, a_U1, a_f1, a_U2, a_f2}, AccuracyGoal -> 40, WorkingPrecision -> 60, Method -> "DifferentialEvolution", MaxIterations -> 1000]