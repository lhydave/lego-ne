num_players = 2

def BestResponse1(s2: p2) -> p1:
    description = "Best response for player 1 against s2"
    extra_params = []
    constraints = [
        forall(x1:p1).forall(x2:p1).forall(y:p2).(f1(x1,y)-f1(x2,y)==U1(x2,y)-U1(x1,y)), # missing inherent constraints
        forall(x:p1).forall(y1:p2).forall(y2:p2).(f2(x,y1)-f2(x,y2)==U2(x,y2)-U2(x,y1)), # missing inherent constraints
        forall(x:p1).(U1(x,s2)<=U1(x1,s2))
    ]
    return x1

def BestResponse2(s1: p1) -> p2:
    description = "Best response for player 2 against s1"
    extra_params = []
    constraints = [
        forall(y:p2).(U2(s1,y)<=U2(s1,y1))
    ]
    return y1

def StationaryPoint() -> List[p1, p2, p1, p2]:
    description = "Compute the stationary point and its dual solution"
    extra_params = ["rho"]
    constraints = [
        f1(w,z)>=f2(w,z), # branch condition
        0<=rho,
        rho<=1,
        f1(xs,ys)==f2(xs,ys),
        forall(x:p1).(U1(x,ys)<=U1(w,ys)),
        forall(y:p2).(U2(xs,y)<=U2(xs,z)),
        forall(x:p1).forall(y:p2).(f1(xs,ys)<=rho*(U1(w,y)-U1(x,ys)-U1(xs,y)+U1(xs,ys))+(1-rho)*(U2(x,z)-U2(xs,y)-U2(x,ys)+U2(xs,ys)))
    ]
    return xs, ys, w, z

def EqMix1(x1: p1, x2: p1) -> p1:
    description = "Equal mixture of two strategies for player 1"
    extra_params = []
    constraints = [
        forall(u:Payoff).forall(y:p2).(u(x1,y)+u(x2,y)==2*u(x,y))
    ]
    return x

def EqMix2(y1: p2, y2: p2) -> p2:
    description = "Equal mixture of two strategies for player 2"
    extra_params = []
    constraints = [
        forall(u:Payoff).forall(x:p1).(u(x,y1)+u(x,y2)==2*u(x,y)),
        forall(x:p1).(f1(x,y1)+f1(x,y2)>=2*f1(x,y)),
    ]
    return y

def algo():
    xs:p1, ys:p2, w:p1, z:p2 = StationaryPoint()
    y_hat:p2 = EqMix2(ys, z)
    w_hat:p1 = BestResponse1(y_hat)