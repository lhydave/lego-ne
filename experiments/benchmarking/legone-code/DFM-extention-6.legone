num_players = 3

def Random3() -> p3:
    description = "Random strategy for player 3"
    extra_params = []
    constraints = [
    ]
    return x3

def TwoPlayerSOTA3(s3: p3) -> List[p1, p2]:
    description = "Two-player SOTA algorithms for players 1 and 2 with fixed player 3 strategy"
    extra_params = []
    constraints = [
        f1(x1,y1,s3)<=1/3,
        f2(x1,y1,s3)<=1/3
    ]
    return x1, y1

def BestResponse3(s1: p1, s2: p2) -> p3:
    description = "Best response for player 3 against (s1, s2)"
    extra_params = []
    constraints = [
        forall(z:p3).(U3(s1,s2,z)<=U3(s1,s2,z1))
    ]
    return z1

def inherent_constraints() -> p1:
    description = "Inherent constraints for 3-player games"
    extra_params = []
    constraints = [
        forall(x1:p1).forall(x2:p1).forall(y:p2).forall(z:p3).(f1(x1,y,z)-f1(x2,y,z)==U1(x2,y,z)-U1(x1,y,z)),
        forall(x:p1).forall(y1:p2).forall(y2:p2).forall(z:p3).(f2(x,y1,z)-f2(x,y2,z)==U2(x,y2,z)-U2(x,y1,z)),
        forall(x:p1).forall(y:p2).forall(z1:p3).forall(z2:p3).(f3(x,y,z1)-f3(x,y,z2)==U3(x,y,z2)-U3(x,y,z1)),
        
        forall(x:p1).forall(y:p2).forall(z:p3).(f1(x,y,z)+U1(x,y,z)<=1),
        forall(x:p1).forall(y:p2).forall(z:p3).(f2(x,y,z)+U2(x,y,z)<=1),
        forall(x:p1).forall(y:p2).forall(z:p3).(f3(x,y,z)+U3(x,y,z)<=1),
        
        forall(x:p1).forall(y:p2).forall(z:p3).(f1(x,y,z)>=0),
        forall(x:p1).forall(y:p2).forall(z:p3).(f2(x,y,z)>=0),
        forall(x:p1).forall(y:p2).forall(z:p3).(f3(x,y,z)>=0),
        
        forall(x:p1).forall(y:p2).forall(z:p3).forall(U:Payoff).(U(x,y,z)>=0)
    ]
    return None

def algo():
    z1: p3 = Random3()
    x1: p1, y1: p2 = TwoPlayerSOTA3(z1)
    z2: p3 = BestResponse3(x1, y1)
