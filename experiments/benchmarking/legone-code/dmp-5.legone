num_players = 2

def BestResponse1(s2: p2) -> p1:
    description = "Best response for player 1 against s2"
    extra_params = []
    constraints = [
        forall(x:p1).(U1(x,s2)<=U1(x1,s2))
    ]
    return x1

def BestResponse2(s1: p1) -> p2:
    description = "Best response for player 2 against s1"
    extra_params = []
    constraints = [
        forall(y:p2).(U2(s1,y)<=U2(s1,y1))
    ]
    return y1

def Random1() -> p1:
    description = "Random strategy for player 1"
    extra_params = []
    constraints = []
    return x

def inherent_constraints() -> p1:
    description = "Inherent constraints"
    extra_params = []
    constraints = [
        forall(x1:p1).forall(x2:p1).forall(y:p2).(f1(x1,y)-f1(x2,y)==U1(x2,y)-U1(x1,y)),
        forall(x:p1).forall(y1:p2).forall(y2:p2).(f2(x,y1)-f2(x,y2)==U2(x,y2)-U2(x,y1)),
        forall(x:p1).forall(y:p2).(f1(x,y)+U1(x,y)<=1),
        forall(x:p1).forall(y:p2).(f2(x,y)+U2(x,y)<=1),
        forall(x:p1).forall(y:p2).(f1(x,y)>=0),
        forall(x:p1).forall(y:p2).(f2(x,y)>=0),
        forall(x:p1).forall(y:p2).forall(U:Payoff).(U(x,y)>=0)
    ]
    return None

def algo():
    b1: p1 = Random1()
    b2: p2 = BestResponse2(b1)
    a1: p1 = BestResponse1(b2)
