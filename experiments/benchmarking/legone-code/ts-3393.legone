num_players = 2

def StationaryPoint() -> List[p1, p2, p1, p2]:
    description = "Compute the stationary point and its dual solution"
    extra_params = ["rho"]
    constraints = [
        0<=rho,
        rho<=1,
        f1(xs,ys)==f2(xs,ys),
        forall(x:p1).(U1(x,ys)<=U1(w,ys)),
        forall(y:p2).(U2(xs,y)<=U2(xs,z)),
        forall(x:p1).forall(y:p2).(f1(xs,ys)<=rho*(U1(w,y)-U1(x,ys)-U1(xs,y)+U1(xs,ys))+(1-rho)*(U2(x,z)-U2(xs,y)-U2(x,ys)+U2(xs,ys)))
    ]
    return xs, ys, w, z

def inherent_constraints() -> p1:
    description = "Inherent constraints"
    extra_params = []
    constraints = [
        forall(x1:p1).forall(x2:p1).forall(y:p2).(f1(x1,y)-f1(x2,y)==U1(x2,y)-U1(x1,y)),
        forall(x:p1).forall(y1:p2).forall(y2:p2).(f2(x,y1)-f2(x,y2)==U2(x,y2)-U2(x,y1)),
        forall(x:p1).forall(y:p2).(f1(x,y)+U1(x,y)<=1),
        forall(x:p1).forall(y:p2).(f2(x,y)+U2(x,y)<=1),
        forall(x:p1).forall(y:p2).(f1(x,y)>=0),
        forall(x:p1).forall(y:p2).(f2(x,y)>=0),
        forall(x:p1).forall(y:p2).forall(U:Payoff).(U(x,y)>=0)
    ]
    return None

def algo():
    xs:p1, ys:p2, w:p1, z:p2 = StationaryPoint()
